local M = {}

M.setup = function()
  require('snacks').setup({
    input = { enabled = true },
    scratch = { enabled = true },
    styles = {
      input = {
        relative = 'cursor',
        row = -3,
        width = 30,
      },
    },
  })

  local map = vim.keymap.set

  map('n', '<Leader>T', function()
    Snacks.explorer()
  end, { desc = 'File explorer' })
  map('n', '<Leader>fb', function()
    Snacks.picker.buffers()
  end, { desc = 'Buffers' })
  map('n', '<Leader>fc', function()
    Snacks.picker.files({ cwd = vim.fn.stdpath('config') })
  end, { desc = 'Find Config File' })
  map('n', '<Leader>ff', function()
    Snacks.picker.files()
  end, { desc = 'Find Files' })
  map('n', '<Leader>fg', function()
    Snacks.picker.git_files()
  end, { desc = 'Find Git Files' })
  map('n', '<Leader>fp', function()
    Snacks.picker.projects()
  end, { desc = 'Projects' })
  map('n', '<Leader>fr', function()
    Snacks.picker.recent()
  end, { desc = 'Recent' })
  map('n', '<Leader>gb', function()
    Snacks.picker.git_branches()
  end, { desc = 'Git Branches' })
  map('n', '<Leader>gl', function()
    Snacks.picker.git_log()
  end, { desc = 'Git Log' })
  map('n', '<Leader>gL', function()
    Snacks.picker.git_log_line()
  end, { desc = 'Git Log Line' })
  map('n', '<Leader>gs', function()
    Snacks.picker.git_status()
  end, { desc = 'Git Status' })
  map('n', '<Leader>gS', function()
    Snacks.picker.git_stash()
  end, { desc = 'Git Stash' })
  map('n', '<Leader>gd', function()
    Snacks.picker.git_diff()
  end, { desc = 'Git Diff (Hunks)' })
  map('n', '<Leader>gf', function()
    Snacks.picker.git_log_file()
  end, { desc = 'Git Log File' })
  map('n', '<Leader>sb', function()
    Snacks.picker.lines()
  end, { desc = 'Buffer Lines' })
  map('n', '<Leader>sB', function()
    Snacks.picker.grep_buffers()
  end, { desc = 'Grep Open Buffers' })
  map('n', '<Leader>sg', function()
    Snacks.picker.grep()
  end, { desc = 'Grep' })
  map({ 'n', 'x' }, '<Leader>sw', function()
    Snacks.picker.grep_word()
  end, { desc = 'Visual selection or word' })
  map('n', '<Leader>s"', function()
    Snacks.picker.registers()
  end, { desc = 'Registers' })
  map('n', '<Leader>s/', function()
    Snacks.picker.search_history()
  end, { desc = 'Search History' })
  map('n', '<Leader>sa', function()
    Snacks.picker.autocmds()
  end, { desc = 'Autocmds' })
  map('n', '<Leader>sb', function()
    Snacks.picker.lines()
  end, { desc = 'Buffer Lines' })
  map('n', '<Leader>sc', function()
    Snacks.picker.command_history()
  end, { desc = 'Command History' })
  map('n', '<Leader>sC', function()
    Snacks.picker.commands()
  end, { desc = 'Commands' })
  map('n', '<Leader>sd', function()
    Snacks.picker.diagnostics()
  end, { desc = 'Diagnostics' })
  map('n', '<Leader>sD', function()
    Snacks.picker.diagnostics_buffer()
  end, { desc = 'Buffer Diagnostics' })
  map('n', '<Leader>sh', function()
    Snacks.picker.help()
  end, { desc = 'Help Pages' })
  map('n', '<Leader>sH', function()
    Snacks.picker.highlights()
  end, { desc = 'Highlights' })
  map('n', '<Leader>si', function()
    Snacks.picker.icons()
  end, { desc = 'Icons' })
  map('n', '<Leader>sj', function()
    Snacks.picker.jumps()
  end, { desc = 'Jumps' })
  map('n', '<Leader>sk', function()
    Snacks.picker.keymaps()
  end, { desc = 'Keymaps' })
  map('n', '<Leader>sl', function()
    Snacks.picker.loclist()
  end, { desc = 'Location List' })
  map('n', '<Leader>sM', function()
    Snacks.picker.marks()
  end, { desc = 'Marks' })
  map('n', '<Leader>sm', function()
    Snacks.picker.man()
  end, { desc = 'Man Pages' })
  map('n', '<Leader>sn', function()
    Snacks.picker.notifications()
  end, { desc = 'Notification History' })
  map('n', '<Leader>sq', function()
    Snacks.picker.qflist()
  end, { desc = 'Quickfix List' })
  map('n', '<Leader>sR', function()
    Snacks.picker.resume()
  end, { desc = 'Resume' })
  map('n', '<Leader>su', function()
    Snacks.picker.undo()
  end, { desc = 'Undo History' })
  map('n', '<Leader>sU', function()
    Snacks.picker.colorschemes()
  end, { desc = 'Colorschemes' })
end

return M
